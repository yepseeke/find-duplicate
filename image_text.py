import os
import cv2
import pandas as pd
from tqdm import tqdm
from paddleocr import PaddleOCR

def batch_ocr(image_paths, ocr):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º batch –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–∏—Ç—ã–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    """
    images_to_process = []
    indices_map = []  # –ß—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫ –∫–∞–∫–∏–º –ø–æ–∑–∏—Ü–∏—è–º –≤ batch –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–∞–∂–¥—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª

    for idx, path in enumerate(image_paths):
        if not os.path.isfile(path):
            continue
        img = cv2.imread(path)
        if img is None:
            continue
        images_to_process.append(path)
        indices_map.append(idx)

    texts = [""] * len(image_paths)  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç—ã–µ

    if not images_to_process:
        return texts

    try:
        ocr_results = ocr.ocr(images_to_process, cls=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ OCR: {e}")
        return texts

    for idx, result in zip(indices_map, ocr_results):
        lines = []
        for line in result:
            _, (text, _) = line
            lines.append(text)
        texts[idx] = "\n".join(lines)

    return texts

def process_parquet(df_path, images_folder, batch_size=16, save_path=None):
    df = pd.read_parquet(df_path)
    ocr = PaddleOCR(use_angle_cls=True, lang='ru', use_gpu=True)

    base_image_paths = [os.path.join(images_folder, f"{h}.jpg") for h in df['base_image_title']]
    cand_image_paths = [os.path.join(images_folder, f"{h}.jpg") for h in df['cand_image_title']]

    base_texts = []
    cand_texts = []

    num_batches = (len(df) + batch_size - 1) // batch_size

    print("üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å OCR:")
    for i in tqdm(range(0, len(df), batch_size), total=num_batches, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π"):
        base_batch = base_image_paths[i:i+batch_size]
        cand_batch = cand_image_paths[i:i+batch_size]

        base_texts.extend(batch_ocr(base_batch, ocr))
        cand_texts.extend(batch_ocr(cand_batch, ocr))

    df['base_image_text'] = base_texts
    df['cand_image_text'] = cand_texts

    if save_path:
        df.to_parquet(save_path, index=False)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {save_path}")

    return df

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="OCR –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ö—ç—à–∞–º –∏–∑ parquet —Ñ–∞–π–ª–∞")
    parser.add_argument("df_path", help="–ü—É—Ç—å –∫ parquet —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏")
    parser.add_argument("images_folder", help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    parser.add_argument("--batch_size", type=int, default=16, help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è OCR")
    parser.add_argument("--save_path", type=str, default=None, help="–ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç parquet")

    args = parser.parse_args()

    process_parquet(args.df_path, args.images_folder, args.batch_size, args.save_path)
